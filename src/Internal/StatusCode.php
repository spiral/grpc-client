<?php

declare(strict_types=1);

namespace Spiral\Grpc\Client\Internal;

/**
 * GRPC specific status codes. Sources from Go/GRPC implementation.
 *
 * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L31
 */
enum StatusCode: int
{
    /**
     * OK is returned on success.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L32-L33
     */
    case Ok = 0;

    /**
     * Indicates the operation was canceled (typically by the caller).
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L35-L39
     */
    case Cancelled = 1;

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L41-L49
     */
    case Unknown = 2;

    /**
     * Indicates client specified an invalid argument.
     *
     * Note that this differs from {@see FAILED_PRECONDITION}. It indicates
     * arguments that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L51-L57
     */
    case InvalidArgument = 3;

    /**
     * Means operation expired before completion.
     *
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L59-L67
     */
    case DeadlineExceeded = 4;

    /**
     * Means some requested entity (e.g., file or directory) was not found.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L69-L73
     */
    case NotFound = 5;

    /**
     * Means an attempt to create an entity failed because one already exists.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L75-L79
     */
    case AlreadyExists = 6;

    /**
     * Indicates the caller does not have permission to execute the specified
     * operation. It must not be used for rejections caused by exhausting some
     * resource (use {@see RESOURCE_EXHAUSTED} instead for those errors).
     * It must not be used if the caller cannot be identified
     * (use {@see UNAUTHENTICATED} instead for those errors).
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L81-L90
     */
    case PermissionDenied = 7;

    /**
     * Indicates some resource has been exhausted, perhaps a per-user quota,
     * or perhaps the entire file system is out of space.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L92-L98
     */
    case ResourceExhausted = 8;

    /**
     * Indicates operation was rejected because the system is not in a state
     * required for the operation's execution.
     *
     * For example, directory to be deleted may be non-empty, an {@see rmdir}
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between {@see FAILED_PRECONDITION}, {@see ABORTED},
     * and {@see UNAVAILABLE}:
     *
     * - Use {@see UNAVAILABLE} if the client can retry just the failing call.
     *
     * - Use {@see ABORTED} if the client should retry at a higher-level
     *   (e.g., restarting a read-modify-write sequence).
     *
     * - Use {@see FAILED_PRECONDITION} if the client should not retry until
     *   the system state has been explicitly fixed. E.g., if an {@see rmdir}
     *   fails because the directory is non-empty, {@see FAILED_PRECONDITION}
     *   should be returned since the client should not retry unless
     *   they have first fixed up the directory by deleting files from it.
     *
     * - Use {@see FAILED_PRECONDITION} if the client performs conditional
     *   REST GET/UPDATE/DELETE on a resource and the resource on the
     *   server does not match the condition. E.g., conflicting
     *   read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L100-L120
     */
    case FailedPrecondition = 9;

    /**
     * Indicates the operation was aborted, typically due to a concurrency
     * issue like sequencer check failures, transaction aborts, etc.
     *
     * See litmus test above for deciding between:
     *  - {@see FAILED_PRECONDITION}
     *  - {@see ABORTED}
     *  - {@see UNAVAILABLE}
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L123-L131
     */
    case Aborted = 10;

    /**
     * Means operation was attempted past the valid range.
     *
     * E.g., seeking or reading past end of file.
     *
     * Unlike {@see INVALID_ARGUMENT}, this error indicates a
     * problem that may be fixed if the system state changes. For example,
     * a 32-bit file system will generate {@see INVALID_ARGUMENT}
     * if asked to read at an offset that is not in the range from `0`
     * to `2 ** 32 - 1`, but it will generate {@see OUT_OF_RANGE}
     * if asked to read from an offset past the current file size.
     *
     * There is a fair bit of overlap between {@see FAILED_PRECONDITION}
     * and {@see OUT_OF_RANGE}. We recommend using {@see OUT_OF_RANGE}
     * (the more specific error) when it applies so that callers who are
     * iterating through a space can easily look for an {@see OUT_OF_RANGE}
     * error to detect when they are done.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L133-L150
     */
    case OutOfRange = 11;

    /**
     * Indicates operation is not implemented or not supported/enabled in
     * this service.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L152-L160
     */
    case Unimplemented = 12;

    /**
     * Means some invariants expected by underlying system has been broken.
     * If you see one of these errors, something is very broken.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L162-L168
     */
    case Internal = 13;

    /**
     * Indicates the service is currently unavailable.
     *
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff.
     *
     * See litmus test above for deciding between:
     *  - {@see FAILED_PRECONDITION}
     *  - {@see ABORTED}
     *  - {@see UNAVAILABLE}
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L170-L180
     */
    case Unavailable = 14;

    /**
     * Indicates unrecoverable data loss or corruption.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L182-L185
     */
    case DataLoss = 15;

    /**
     * Indicates the request does not have valid authentication credentials
     * for the operation.
     *
     * @see https://github.com/grpc/grpc-go/blob/v1.35.1/codes/codes.go#L187-L193
     */
    case Unauthenticated = 16;
}
